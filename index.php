<?php
// ============================================================================
// ! MINI-PROJET 1 - NIVEAU D√âBUTANT : Le calculateur simple
// ============================================================================
// CONTEXTE : Vous avez remarqu√© que vous r√©p√©tez souvent le m√™me calcul
// dans votre code. Comment √©viter cette r√©p√©tition ?

// üîç OBSERVATION : Regardez le code ci-dessous et identifiez ce qui se r√©p√®te
echo "=== AVANT (sans fonction) ===\n";
$nombre1 = 5;
$nombre2 = 3;
// On calcule la somme
$resultat1 = $nombre1 + $nombre2;
echo "5 + 3 = " . $resultat1 . "\n";

// On refait le m√™me calcul ailleurs
$nombre3 = 12;
$nombre4 = 8;
$resultat2 = $nombre3 + $nombre4;
echo "12 + 8 = " . $resultat2 . "\n";

// üí° VOTRE MISSION 1 :
// Cr√©ez une fonction appel√©e "additionner" qui prend deux nombres en param√®tre
// et retourne leur somme.
// 
// ? Indice : La syntaxe de base est :
// function nomDeLaFonction($parametre1, $parametre2) {
//     todo: Votre code ici

//     return $resultat;
// }
function additionner($nombre1, $nombre2) {
    $resultat = $nombre1 + $nombre2 ;
    return $resultat;
};

// üìù VOTRE CODE ICI :
// √Ä vous de cr√©er la fonction additionner() et de l'utiliser deux fois
echo additionner($nombre1, $nombre2); 
echo "<br>";
echo additionner($nombre3, $nombre4);
// ============================================================================
// ! MINI-PROJET 2 - NIVEAU INTERM√âDIAIRE : L'assistante de magasin
// ============================================================================
// CONTEXTE : Un magasin vous demande de cr√©er un syst√®me pour 
// calculer les prix des articles avec r√©duction.

// üîç OBSERVATION : Imaginez une fonction qui ferait plusieurs choses :
// 1. Recevoir un prix
// 2. Recevoir un pourcentage de r√©duction
// 3. Calculer le prix r√©duit
// 4. Retourner le r√©sultat

// üí° VOTRE MISSION 2 :
// Cr√©ez une fonction "appliquerReduction" qui :
// - Prend un prix (param√®tre 1)
// - Prend un pourcentage de r√©duction (param√®tre 2)
// - Calcule et retourne le prix final
//
// ? Indice : Pour calculer une r√©duction :
// montantReduit = prix - (prix * pourcentage / 100)
//
// Conseil : Pensez √† bien nommer votre fonction et ses param√®tres
// pour que ce soit clair pour quelqu'un d'autre qui lirait votre code

function appliquerReduction($prix, $pourcentage) {
    $prixFinal = $prix - ($prix * $pourcentage / 100);
    return $prixFinal;
}

// üìù Tests avec au moins 3 articles diff√©rents
$article1 = appliquerReduction(100, 10); // 90
$article2 = appliquerReduction(50, 20);  // 40
$article3 = appliquerReduction(200, 15); // 170

echo "Article 1 : $article1 ‚Ç¨<br>";
echo "Article 2 : $article2 ‚Ç¨<br>";
echo "Article 3 : $article3 ‚Ç¨<br>";

// üìù VOTRE CODE ICI :
// √Ä vous de cr√©er la fonction appliquerReduction() et de tester avec 
// au moins 3 articles diff√©rents

// ============================================================================
// ! MINI-PROJET 3 - NIVEAU AVANC√â : Le validateur d'inscription
// ============================================================================
// CONTEXTE : Un site web a besoin de v√©rifier les informations avant
// d'accepter une inscription. Chaque v√©rification r√©p√®te du code similaire.

// üîç OBSERVATION : Voici ce qu'on doit v√©rifier (imaginez que c'est r√©p√©titif) :
$email = "user@example.com";
$motdepasse = "SecurePass123";
$age = 25;

// üí° VOTRE MISSION 3 :
// Cr√©ez TROIS fonctions diff√©rentes :
//
// 1. verifierEmail($email)
//    - Doit retourner true si l'email contient un "@"
//    - Doit retourner false sinon
//    ? Indice : Utilisez la fonction strpos($cha√Æne, "@") 
//    qui retourne false si "@" n'est pas trouv√©
//
// 2. verifierMotDePasse($motdepasse)
//    - Doit retourner true si le mot de passe fait au moins 8 caract√®res
//    - Doit retourner false sinon
//    ? Indice : Utilisez strlen($cha√Æne) pour obtenir la longueur
//
// 3. verifierAge($age)
//    - Doit retourner true si l'√¢ge est >= 18
//    - Doit retourner false sinon
//
// ‚ö†Ô∏è ATTENTION : Ces fonctions retournent true/false (bool√©en), pas un texte !

$email = "user@example.com";
$motdepasse = "SecurePass123";
$age = 25;

// üí° MISSION 3 : Trois fonctions de v√©rification

function verifierEmail($email) {
    return strpos($email, "@") !== false;
}

function verifierMotDePasse($motdepasse) {
    return strlen($motdepasse) >= 8;
}

function verifierAge($age) {
    return $age >= 18;
}

// üìù Tests avec plusieurs cas

echo "<br><br>=== Tests Validation ===<br>";

echo "Email valide ? " . (verifierEmail($email) ? "‚úÖ Oui" : "‚ùå Non") . "<br>";
echo "Mot de passe valide ? " . (verifierMotDePasse($motdepasse) ? "‚úÖ Oui" : "‚ùå Non") . "<br>";
echo "√Çge valide ? " . (verifierAge($age) ? "‚úÖ Oui" : "‚ùå Non") . "<br>";

// Autres cas de test
echo "<br>Autres cas :<br>";
echo "Email 'userexample.com' ‚Üí " . (verifierEmail("userexample.com") ? "‚úÖ" : "‚ùå") . "<br>";
echo "Mot de passe 'abc' ‚Üí " . (verifierMotDePasse("abc") ? "‚úÖ" : "‚ùå") . "<br>";
echo "√Çge 16 ‚Üí " . (verifierAge(16) ? "‚úÖ" : "‚ùå") . "<br>";
?>
// üìù VOTRE CODE ICI :
// √Ä vous de cr√©er les trois fonctions et de les tester 
// avec plusieurs donn√©es (dont des cas invalides)


// ============================================================================
// üéØ POINTS CL√âS √Ä RETENIR
// ============================================================================
/*
Une fonction PHP c'est :
1. Une r√©utilisabilit√© : √©crivez le code une fois, utilisez-le plusieurs fois
2. De la clart√© : une fonction bien nomm√©e explique ce qu'elle fait
3. De l'ordre : mettez le code ensemble pour que ce soit facile √† modifier

Anatomie d'une fonction :
function nomDeFonction($param1, $param2) {  ‚Üê Les param√®tres (entr√©es)
    todo: Le code √† ex√©cuter
    return $resultat;                       ‚Üê La valeur retourn√©e (sortie)
}

Comment l'utiliser :
$valeur = nomDeFonction($arg1, $arg2);     ‚Üê On l'appelle avec des arguments
*/
